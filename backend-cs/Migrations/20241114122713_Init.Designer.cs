// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TdnApi.Db.Contexts;

#nullable disable

namespace backend_cs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241114122713_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TdnApi.Db.Entities.CharacterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("character_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.GroupData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.InventoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.ItemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("image_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.ItemInventoryData", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.HasKey("ItemId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("inventory_item", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.NoteData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("note_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("header");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("note", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.UserCharacterData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("character_id");

                    b.Property<int>("Privileges")
                        .HasColumnType("int")
                        .HasColumnName("privileges");

                    b.HasKey("UserId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("user_character", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_link");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.UserGroupData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("Privileges")
                        .HasColumnType("int")
                        .HasColumnName("privileges");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("user_group", (string)null);
                });

            modelBuilder.Entity("TdnApi.Models.Db.TokensContext+GroupToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("service_token");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasKey("Token");

                    b.HasIndex("Id");

                    b.ToTable("group_bot_token", (string)null);
                });

            modelBuilder.Entity("TdnApi.Models.Db.TokensContext+UserToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_date");

                    b.HasKey("Token");

                    b.HasIndex("Id");

                    b.ToTable("user_token", (string)null);
                });

            modelBuilder.Entity("TdnApi.Db.Entities.CharacterData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.GroupData", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TdnApi.Db.Entities.InventoryData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.CharacterData", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TdnApi.Db.Entities.ItemData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.GroupData", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TdnApi.Db.Entities.ItemInventoryData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.InventoryData", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdnApi.Db.Entities.ItemData", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TdnApi.Db.Entities.NoteData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.CharacterData", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TdnApi.Db.Entities.UserCharacterData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.CharacterData", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdnApi.Db.Entities.UserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TdnApi.Db.Entities.UserGroupData", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.GroupData", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdnApi.Db.Entities.UserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TdnApi.Models.Db.TokensContext+GroupToken", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.GroupData", "Group")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TdnApi.Models.Db.TokensContext+UserToken", b =>
                {
                    b.HasOne("TdnApi.Db.Entities.UserData", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
